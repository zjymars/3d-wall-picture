import type { Photo } from '../stores/photoStore'

export interface StoredImageData {
  id: string
  url: string
  title: string
  description: string
  date: string
  tags: string[]
  width?: number
  height?: number
  format?: string
  source_website?: string
  lastUpdated: number
  checksum?: string
  // Êñ∞Â¢ûÁöÑÂÖÉÊï∞ÊçÆÂ≠óÊÆµ
  filename?: string
  original_filename?: string
  unique_id?: number
  type_tags?: string[]
  phrase_tags?: string[]
}

export interface StorageStats {
  totalImages: number
  lastSyncTime: number
  storageSize: number
}

class LocalImageStorage {
  private readonly STORAGE_KEY = 'image_storage'
  private readonly STATS_KEY = 'storage_stats'
  private readonly MAX_STORAGE_SIZE = 50 * 1024 * 1024 // 50MB

  // Ëé∑ÂèñÊâÄÊúâÂ≠òÂÇ®ÁöÑÂõæÁâá
  getAllImages(): StoredImageData[] {
    try {
      console.log('üìÇ [Êú¨Âú∞Â≠òÂÇ®1] ‰ªélocalStorageËé∑ÂèñÂõæÁâáÊï∞ÊçÆ...')
      const stored = localStorage.getItem(this.STORAGE_KEY)
      const images = stored ? JSON.parse(stored) : []
      console.log(`üìä [Êú¨Âú∞Â≠òÂÇ®2] ÊàêÂäüËé∑Âèñ ${images.length} Âº†ÂõæÁâá`)
      return images
    } catch (error) {
      console.error('‚ùå [Êú¨Âú∞Â≠òÂÇ®ÈîôËØØ] Ëé∑ÂèñÊú¨Âú∞ÂõæÁâáÂ≠òÂÇ®Â§±Ë¥•:', error)
      return []
    }
  }

  // ‰øùÂ≠òÂõæÁâáÂà∞Êú¨Âú∞Â≠òÂÇ®
  saveImages(images: StoredImageData[]): void {
    try {
      console.log(`üíæ [Êú¨Âú∞Â≠òÂÇ®3] ÂºÄÂßã‰øùÂ≠ò ${images.length} Âº†ÂõæÁâáÂà∞Êú¨Âú∞Â≠òÂÇ®...`)
      const currentImages = this.getAllImages()
      const imageMap = new Map(currentImages.map(img => [img.id, img]))
      console.log(`üìä [Êú¨Âú∞Â≠òÂÇ®4] ÂΩìÂâçÂ≠òÂÇ®‰∏≠Êúâ ${currentImages.length} Âº†ÂõæÁâá`)
      
      // ÂêàÂπ∂Êñ∞ÂõæÁâáÔºåÊõ¥Êñ∞Â∑≤Â≠òÂú®ÁöÑÂõæÁâá
      images.forEach(newImage => {
        imageMap.set(newImage.id, {
          ...newImage,
          lastUpdated: Date.now()
        })
      })

      const allImages = Array.from(imageMap.values())
      console.log(`üìä [Êú¨Âú∞Â≠òÂÇ®5] ÂêàÂπ∂ÂêéÂÖ±Êúâ ${allImages.length} Âº†ÂõæÁâá`)
      
      // Ê£ÄÊü•Â≠òÂÇ®Â§ßÂ∞èÈôêÂà∂
      const storageSize = this.calculateStorageSize(allImages)
      console.log(`üìè [Êú¨Âú∞Â≠òÂÇ®6] Â≠òÂÇ®Â§ßÂ∞è: ${storageSize} bytes (ÈôêÂà∂: ${this.MAX_STORAGE_SIZE} bytes)`)
      
      if (storageSize > this.MAX_STORAGE_SIZE) {
        // Â¶ÇÊûúË∂ÖËøáÈôêÂà∂ÔºåÂà†Èô§ÊúÄÊóßÁöÑÂõæÁâá
        console.log('‚ö†Ô∏è [Êú¨Âú∞Â≠òÂÇ®7] Â≠òÂÇ®Á©∫Èó¥‰∏çË∂≥ÔºåÂºÄÂßãÊ∏ÖÁêÜÊóßÂõæÁâá...')
        allImages.sort((a, b) => a.lastUpdated - b.lastUpdated)
        const imagesToKeep = Math.floor(allImages.length * 0.8) // ‰øùÁïô80%
        const trimmedImages = allImages.slice(-imagesToKeep)
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(trimmedImages))
        console.log(`üóëÔ∏è [Êú¨Âú∞Â≠òÂÇ®8] Âà†Èô§‰∫Ü ${allImages.length - trimmedImages.length} Âº†ÊóßÂõæÁâáÔºå‰øùÁïô ${trimmedImages.length} Âº†`)
      } else {
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allImages))
        console.log(`‚úÖ [Êú¨Âú∞Â≠òÂÇ®9] ÊàêÂäü‰øùÂ≠ò ${allImages.length} Âº†ÂõæÁâáÂà∞localStorage`)
      }

      this.updateStats()
      console.log('üìä [Êú¨Âú∞Â≠òÂÇ®10] Â≠òÂÇ®ÁªüËÆ°‰ø°ÊÅØÂ∑≤Êõ¥Êñ∞')
    } catch (error) {
      console.error('‚ùå [Êú¨Âú∞Â≠òÂÇ®ÈîôËØØ] ‰øùÂ≠òÂõæÁâáÂà∞Êú¨Âú∞Â≠òÂÇ®Â§±Ë¥•:', error)
    }
  }

  // Ëé∑ÂèñÈöèÊú∫ÂõæÁâá
  getRandomImages(count: number): StoredImageData[] {
    const allImages = this.getAllImages()
    if (allImages.length === 0) return []

    const shuffled = [...allImages].sort(() => 0.5 - Math.random())
    return shuffled.slice(0, Math.min(count, allImages.length))
  }

  // Ê†πÊçÆIDËé∑ÂèñÂõæÁâá
  getImageById(id: string): StoredImageData | null {
    const allImages = this.getAllImages()
    return allImages.find(img => img.id === id) || null
  }

  // ÊêúÁ¥¢ÂõæÁâá
  searchImages(keyword: string): StoredImageData[] {
    const allImages = this.getAllImages()
    const lowerKeyword = keyword.toLowerCase()
    
    return allImages.filter(img => 
      img.title.toLowerCase().includes(lowerKeyword) ||
      img.description.toLowerCase().includes(lowerKeyword) ||
      img.tags.some(tag => tag.toLowerCase().includes(lowerKeyword))
    )
  }

  // Ëé∑ÂèñÂ≠òÂÇ®ÁªüËÆ°‰ø°ÊÅØ
  getStats(): StorageStats {
    try {
      const stored = localStorage.getItem(this.STATS_KEY)
      const stats = stored ? JSON.parse(stored) : { totalImages: 0, lastSyncTime: 0, storageSize: 0 }
      
      // Êõ¥Êñ∞ÂΩìÂâçÁªüËÆ°‰ø°ÊÅØ
      const allImages = this.getAllImages()
      stats.totalImages = allImages.length
      stats.storageSize = this.calculateStorageSize(allImages)
      
      return stats
    } catch (error) {
      console.error('Ëé∑ÂèñÂ≠òÂÇ®ÁªüËÆ°‰ø°ÊÅØÂ§±Ë¥•:', error)
      return { totalImages: 0, lastSyncTime: 0, storageSize: 0 }
    }
  }

  // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
  private updateStats(): void {
    const stats = this.getStats()
    stats.lastSyncTime = Date.now()
    localStorage.setItem(this.STATS_KEY, JSON.stringify(stats))
  }

  // ËÆ°ÁÆóÂ≠òÂÇ®Â§ßÂ∞è
  private calculateStorageSize(images: StoredImageData[]): number {
    return new Blob([JSON.stringify(images)]).size
  }

  // Ê∏ÖÁ©∫ÊâÄÊúâÂ≠òÂÇ®
  clearAll(): void {
    localStorage.removeItem(this.STORAGE_KEY)
    localStorage.removeItem(this.STATS_KEY)
  }

  // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂêåÊ≠•ÔºàÂü∫‰∫éÊó∂Èó¥ÊàñÂõæÁâáÊï∞ÈáèÔºâ
  needsSync(): boolean {
    const stats = this.getStats()
    const now = Date.now()
    const oneHour = 60 * 60 * 1000
    
    // Â¶ÇÊûúË∂ÖËøá1Â∞èÊó∂Ê≤°ÊúâÂêåÊ≠•ÔºåÊàñËÄÖÊ≤°ÊúâÂõæÁâáÔºåÂàôÈúÄË¶ÅÂêåÊ≠•
    return (now - stats.lastSyncTime) > oneHour || stats.totalImages === 0
  }

  // ËΩ¨Êç¢‰∏∫PhotoÊ†ºÂºè
  toPhotoFormat(storedImage: StoredImageData): Photo {
    return {
      id: storedImage.id,
      url: storedImage.url,
      title: storedImage.title,
      description: storedImage.description,
      date: storedImage.date,
      tags: storedImage.tags,
      width: storedImage.width,
      height: storedImage.height,
      format: storedImage.format,
      source_website: storedImage.source_website
    }
  }

  // ‰ªéPhotoÊ†ºÂºèËΩ¨Êç¢
  fromPhotoFormat(photo: Photo): StoredImageData {
    return {
      id: photo.id,
      url: photo.url,
      title: photo.title,
      description: photo.description,
      date: photo.date,
      tags: photo.tags,
      width: photo.width,
      height: photo.height,
      format: photo.format,
      source_website: photo.source_website,
      lastUpdated: Date.now()
    }
  }
}

export const localImageStorage = new LocalImageStorage()
